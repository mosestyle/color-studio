{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/CategoryFilter.js","components/Hero.js","utils/contrastUtils.js","components/ColorLock.js","utils/colorUtils.js","components/ColorPanel.js","components/ColorShades.js","components/ColorColumn.js","hooks/useColorGenerator.js","data/colorCategories.js","App.js","hooks/useLocalStorage.js","hooks/useKeyPress.js","reportWebVitals.js","index.js"],"names":["Header","React","createElement","className","SearchBar","_ref","searchTerm","setSearchTerm","onSearch","inputRef","useRef","onSubmit","e","preventDefault","ref","type","value","onChange","target","placeholder","onClick","handleClear","current","focus","aria-label","CategoryFilter","categories","selectedCategory","setSelectedCategory","map","category","key","id","name","Hero","getLuminance","hexColor","hex","replace","r","parseInt","substring","g","b","Math","pow","getContrastRatio","color1","color2","luminance1","luminance2","max","min","ColorLock","color","isLocked","onToggle","textColor","bgColor","getReadableTextColor","style","backgroundColor","generateRandomColor","floor","random","toString","padStart","isColorDark","getTextColor","hexToRgb","cleanHex","rgbToHex","slice","getColorName","hue","getHue","saturation","getSaturation","lightness","getLightness","colorName","delta","round","generateBalancedPalette","Array","fill","doesColorMatchCategory","toLowerCase","ColorPanel","copied","setCopied","useState","copyToClipboard","navigator","clipboard","writeText","setTimeout","ColorShades","baseColor","copiedIndex","setCopiedIndex","shades","count","arguments","length","undefined","i","factor","newR","newG","newB","push","generateShades","shade","index","ColorColumn","onToggleLock","showShades","setShowShades","onMouseEnter","onMouseLeave","useColorGenerator","initialPalette","initialLockedState","palette","setPalette","lockedColors","setLockedColors","generateNewPalette","useCallback","prevPalette","newPalette","neutralColor","accentColor","attempts","generateCategoryPalette","toggleLock","prevState","newState","updateColor","description","examples","App","savedPalettes","setSavedPalettes","useLocalStorage","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","useEffect","handleStorageChange","newValue","addEventListener","removeEventListener","valueToStore","Function","setItem","stringify","spacePressed","targetKey","keyPressed","setKeyPressed","downHandler","upHandler","_ref2","useKeyPress","filteredPalette","filter","search","includes","savePalette","newSavedPalette","Date","now","colors","timestamp","toISOString","reportWebVitals","onPerfEntry","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c3f8cad3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <div className=\"header-content\">\n        <div className=\"logo\">\n          <div className=\"logo-gradient\"></div>\n          <h1>Color Studio</h1>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;","import React, { useRef } from 'react';\n\nconst SearchBar = ({ searchTerm, setSearchTerm, onSearch }) => {\n  const inputRef = useRef(null);\n  \n  const handleChange = (e) => {\n    setSearchTerm(e.target.value);\n    if (onSearch) {\n      onSearch(e.target.value);\n    }\n  };\n  \n  const handleClear = () => {\n    setSearchTerm('');\n    inputRef.current.focus();\n    if (onSearch) {\n      onSearch('');\n    }\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (onSearch) {\n      onSearch(searchTerm);\n    }\n  };\n  \n  return (\n    <form className=\"search-bar\" onSubmit={handleSubmit}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={searchTerm}\n        onChange={handleChange}\n        placeholder=\"Search colors by name, hex code, or category...\"\n        className=\"search-input\"\n      />\n      {searchTerm && (\n        <button \n          type=\"button\"\n          onClick={handleClear} \n          className=\"clear-button\"\n          aria-label=\"Clear search\"\n        >\n          ✕\n        </button>\n      )}\n      <button \n        type=\"submit\" \n        className=\"search-button\"\n        aria-label=\"Search\"\n      >\n        🔍\n      </button>\n    </form>\n  );\n};\n\nexport default SearchBar;","import React from 'react';\n\nconst CategoryFilter = ({ categories, selectedCategory, setSelectedCategory }) => {\n  return (\n    <div className=\"category-filter\">\n      <div className=\"category-chips\">\n        <button \n          className={`category-chip ${!selectedCategory ? 'active' : ''}`}\n          onClick={() => setSelectedCategory(null)}\n        >\n          All\n        </button>\n        \n        {categories.map(category => (\n          <button\n            key={category.id}\n            className={`category-chip ${selectedCategory === category.id ? 'active' : ''}`}\n            onClick={() => setSelectedCategory(category.id)}\n          >\n            {category.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryFilter;","import React from 'react';\nimport SearchBar from './SearchBar';\nimport CategoryFilter from './CategoryFilter';\n\nconst Hero = ({ \n  searchTerm, \n  setSearchTerm, \n  selectedCategory, \n  setSelectedCategory,\n  categories,\n  onSearch\n}) => {\n  return (\n    <div className=\"hero\">\n      <div className=\"hero-background\"></div>\n      <div className=\"hero-content\">\n        <h2 className=\"hero-title\">Discover Perfect Color Palettes</h2>\n        <p className=\"hero-subtitle\">\n          Generate, explore, and save beautiful color combinations for your projects\n        </p>\n        \n        <div className=\"search-container\">\n          <SearchBar \n            searchTerm={searchTerm} \n            setSearchTerm={setSearchTerm}\n            onSearch={onSearch}\n          />\n          \n          <CategoryFilter \n            categories={categories}\n            selectedCategory={selectedCategory}\n            setSelectedCategory={setSelectedCategory}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Hero;","// src/utils/contrastUtils.js\n\n/**\n * Calculates the relative luminance of a color as per WCAG 2.0\n * @param {string} hexColor - Hex color code\n * @returns {number} - Relative luminance value\n */\nexport const getLuminance = (hexColor) => {\n  // Remove the hash if it exists\n  const hex = hexColor.replace('#', '');\n  \n  // Parse the RGB values\n  const r = parseInt(hex.substring(0, 2), 16) / 255;\n  const g = parseInt(hex.substring(2, 4), 16) / 255;\n  const b = parseInt(hex.substring(4, 6), 16) / 255;\n  \n  // Calculate the luminance according to WCAG 2.0\n  const R = r <= 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);\n  const G = g <= 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4);\n  const B = b <= 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4);\n  \n  return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n};\n\n/**\n * Calculates the contrast ratio between two colors as per WCAG 2.0\n * @param {string} color1 - First hex color\n * @param {string} color2 - Second hex color\n * @returns {number} - Contrast ratio\n */\nexport const getContrastRatio = (color1, color2) => {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n  \n  // Ensure the lighter color is the first one\n  const lighter = Math.max(luminance1, luminance2);\n  const darker = Math.min(luminance1, luminance2);\n  \n  // Calculate the contrast ratio\n  return (lighter + 0.05) / (darker + 0.05);\n};\n\n/**\n * Determines if a text color has sufficient contrast against a background\n * @param {string} textColor - Hex color code of the text\n * @param {string} bgColor - Hex color code of the background\n * @param {string} level - WCAG compliance level ('AA' or 'AAA')\n * @param {boolean} isLargeText - Whether the text is considered large\n * @returns {boolean} - Whether the contrast is sufficient\n */\nexport const hasEnoughContrast = (textColor, bgColor, level = 'AA', isLargeText = false) => {\n  const ratio = getContrastRatio(textColor, bgColor);\n  \n  if (level === 'AAA') {\n    return isLargeText ? ratio >= 4.5 : ratio >= 7;\n  }\n  \n  // AA level\n  return isLargeText ? ratio >= 3 : ratio >= 4.5;\n};\n\n/**\n * Gets the most readable text color (black or white) for a background\n * @param {string} bgColor - Hex color code of the background\n * @returns {string} - '#FFFFFF' or '#000000'\n */\nexport const getReadableTextColor = (bgColor) => {\n  const whiteContrast = getContrastRatio(bgColor, '#FFFFFF');\n  const blackContrast = getContrastRatio(bgColor, '#000000');\n  \n  return whiteContrast > blackContrast ? '#FFFFFF' : '#000000';\n};","import React from 'react';\nimport { getReadableTextColor } from '../utils/contrastUtils';\n\nconst ColorLock = ({ color, isLocked, onToggle }) => {\n  const textColor = getReadableTextColor(color);\n  \n  return (\n    <button \n      className={`color-lock ${isLocked ? 'locked' : 'unlocked'}`}\n      onClick={onToggle}\n      style={{ \n        color: textColor,\n        backgroundColor: `${color}80` // 50% transparent background\n      }}\n      aria-label={isLocked ? \"Unlock color\" : \"Lock color\"}\n    >\n      <span className=\"lock-icon\">\n        {isLocked ? '🔒' : '🔓'}\n      </span>\n    </button>\n  );\n};\n\nexport default ColorLock;","/**\n * Generates a random hex color\n * @returns {string} - Random hex color\n */\nexport const generateRandomColor = () => {\n  return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');\n};\n\n/**\n * Determines if a color is dark\n * @param {string} hexColor - Hex color code\n * @returns {boolean} - True if color is dark\n */\nexport const isColorDark = (hexColor) => {\n  // Remove the hash if it exists\n  const hex = hexColor.replace('#', '');\n  \n  // Parse the RGB values\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n  \n  // Calculate relative luminance\n  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n  \n  // Return true if the color is dark\n  return luminance < 0.5;\n};\n\n/**\n * Generates a text color based on the background color\n * @param {string} backgroundColor - Hex color code of background\n * @returns {string} - Either white or black, depending on contrast\n */\nexport const getTextColor = (backgroundColor) => {\n  return isColorDark(backgroundColor) ? '#FFFFFF' : '#000000';\n};\n\n/**\n * Converts a hex color to RGB\n * @param {string} hex - Hex color code\n * @returns {Object} - RGB color object\n */\nexport const hexToRgb = (hex) => {\n  const cleanHex = hex.replace('#', '');\n  const r = parseInt(cleanHex.substring(0, 2), 16);\n  const g = parseInt(cleanHex.substring(2, 4), 16);\n  const b = parseInt(cleanHex.substring(4, 6), 16);\n  return { r, g, b };\n};\n\n/**\n * Converts RGB to hex\n * @param {number} r - Red value (0-255)\n * @param {number} g - Green value (0-255)\n * @param {number} b - Blue value (0-255)\n * @returns {string} - Hex color code\n */\nexport const rgbToHex = (r, g, b) => {\n  return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;\n};\n\n/**\n * Generates shades of a color\n * @param {string} hexColor - Base hex color\n * @param {number} count - Number of shades to generate\n * @returns {Array} - Array of hex color shades\n */\nexport const generateShades = (hexColor, count = 9) => {\n  const { r, g, b } = hexToRgb(hexColor);\n  const shades = [];\n  \n  // Generate darker to lighter shades\n  for (let i = 0; i < count; i++) {\n    const factor = -0.4 + (i / (count - 1)) * 0.8; // Range from -0.4 (darker) to 0.4 (lighter)\n    \n    // Calculate new RGB values\n    const newR = Math.min(255, Math.max(0, Math.round(r * (1 + factor))));\n    const newG = Math.min(255, Math.max(0, Math.round(g * (1 + factor))));\n    const newB = Math.min(255, Math.max(0, Math.round(b * (1 + factor))));\n    \n    shades.push(rgbToHex(newR, newG, newB));\n  }\n  \n  return shades;\n};\n\n/**\n * Simple algorithm to approximate a color name\n * @param {string} hexColor - Hex color code\n * @returns {string} - Approximate color name\n */\nexport const getColorName = (hexColor) => {\n  const { r, g, b } = hexToRgb(hexColor);\n  \n  // Basic color name approximation\n  const hue = getHue(r, g, b);\n  const saturation = getSaturation(r, g, b);\n  const lightness = getLightness(r, g, b);\n  \n  // Very dark colors (almost black)\n  if (lightness < 15) {\n    return 'Black';\n  }\n  \n  // Very light colors (almost white)\n  if (lightness > 95) {\n    return 'White';\n  }\n  \n  // Gray colors (low saturation)\n  if (saturation < 10) {\n    if (lightness < 30) return 'Dark Gray';\n    if (lightness < 70) return 'Gray';\n    return 'Light Gray';\n  }\n  \n  // Determine color name based on hue\n  let colorName = '';\n  \n  if (hue < 30 || hue >= 330) colorName = 'Red';\n  else if (hue < 60) colorName = 'Orange';\n  else if (hue < 90) colorName = 'Yellow';\n  else if (hue < 150) colorName = 'Green';\n  else if (hue < 210) colorName = 'Cyan';\n  else if (hue < 270) colorName = 'Blue';\n  else if (hue < 330) colorName = 'Purple';\n  \n  // Add modifiers based on lightness\n  if (lightness < 30) {\n    return 'Dark ' + colorName;\n  } else if (lightness > 80) {\n    return 'Light ' + colorName;\n  }\n  \n  return colorName;\n};\n\n/**\n * Calculate the hue from RGB\n * @param {number} r - Red value (0-255)\n * @param {number} g - Green value (0-255)\n * @param {number} b - Blue value (0-255)\n * @returns {number} - Hue value (0-360)\n */\nconst getHue = (r, g, b) => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  \n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let hue = 0;\n  \n  if (max === min) {\n    return 0; // achromatic\n  }\n  \n  const delta = max - min;\n  \n  if (max === r) {\n    hue = ((g - b) / delta + (g < b ? 6 : 0)) * 60;\n  } else if (max === g) {\n    hue = ((b - r) / delta + 2) * 60;\n  } else {\n    hue = ((r - g) / delta + 4) * 60;\n  }\n  \n  return Math.round(hue);\n};\n\n/**\n * Calculate the saturation from RGB\n * @param {number} r - Red value (0-255)\n * @param {number} g - Green value (0-255)\n * @param {number} b - Blue value (0-255)\n * @returns {number} - Saturation value (0-100)\n */\nconst getSaturation = (r, g, b) => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  \n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const lightness = (max + min) / 2;\n  \n  if (max === min) {\n    return 0; // achromatic\n  }\n  \n  const delta = max - min;\n  const saturation = lightness > 0.5 \n    ? delta / (2 - max - min) \n    : delta / (max + min);\n  \n  return Math.round(saturation * 100);\n};\n\n/**\n * Calculate the lightness from RGB\n * @param {number} r - Red value (0-255)\n * @param {number} g - Green value (0-255)\n * @param {number} b - Blue value (0-255)\n * @returns {number} - Lightness value (0-100)\n */\nconst getLightness = (r, g, b) => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  \n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const lightness = (max + min) / 2;\n  \n  return Math.round(lightness * 100);\n};\n\n/**\n * Generates a balanced color palette\n * @returns {Array} - Array of 5 hex colors (3 dark, 1 neutral, 1 accent)\n */\nexport const generateBalancedPalette = () => {\n  // Generate dark colors (3)\n  const darkColors = Array(3).fill().map(() => {\n    let color;\n    do {\n      color = generateRandomColor();\n    } while (!isColorDark(color));\n    return color;\n  });\n  \n  // Generate neutral color (1)\n  const neutralColor = (() => {\n    let color;\n    do {\n      color = generateRandomColor();\n      const { r, g, b } = hexToRgb(color);\n      // Check if the color is relatively neutral (similar R, G, B values)\n      const range = Math.max(r, g, b) - Math.min(r, g, b);\n    } while (isColorDark(color));\n    return color;\n  })();\n  \n  // Generate accent color (1) - brighter, more saturated\n  const accentColor = (() => {\n    let color;\n    do {\n      color = generateRandomColor();\n      const { r, g, b } = hexToRgb(color);\n      const saturation = getSaturation(r, g, b);\n    } while (isColorDark(color) || getSaturation(hexToRgb(color).r, hexToRgb(color).g, hexToRgb(color).b) < 70);\n    return color;\n  })();\n  \n  return [...darkColors, neutralColor, accentColor];\n};\n\n/**\n * Checks if a color matches a category based on common associations\n * @param {string} hexColor - Hex color code\n * @param {string} category - Category name\n * @returns {boolean} - True if the color matches the category\n */\nexport const doesColorMatchCategory = (hexColor, category) => {\n  const { r, g, b } = hexToRgb(hexColor);\n  const hue = getHue(r, g, b);\n  const saturation = getSaturation(r, g, b);\n  const lightness = getLightness(r, g, b);\n  \n  // Category matching logic based on color characteristics\n  switch (category.toLowerCase()) {\n    case 'nature':\n      // Greens, browns, blues\n      return (hue >= 90 && hue < 150) || // Greens\n             (hue >= 20 && hue < 40 && saturation < 60) || // Browns\n             (hue >= 180 && hue < 240); // Blues\n    \n    case 'technology':\n      // Blues, silvers, blacks\n      return (hue >= 180 && hue < 240) || // Blues\n             (saturation < 15 && lightness > 60) || // Silvers\n             (lightness < 20); // Blacks\n    \n    case 'food':\n      // Reds, oranges, yellows, browns\n      return (hue < 60) || // Reds, oranges, yellows\n             (hue >= 20 && hue < 40 && saturation < 60); // Browns\n    \n    case 'fashion':\n      // Blacks, whites, reds, purples\n      return (lightness < 15) || // Blacks\n             (lightness > 90) || // Whites\n             (hue < 10 || hue >= 340) || // Reds\n             (hue >= 270 && hue < 330); // Purples\n    \n    case 'art':\n      // Vibrant colors with high saturation\n      return saturation > 70;\n    \n    default:\n      return true;\n  }\n};\n\n/**\n * Generates a palette filtered by category\n * @param {string} category - Category name\n * @returns {Array} - Array of 5 hex colors that match the category\n */\nexport const generateCategoryPalette = (category) => {\n  if (!category) {\n    return generateBalancedPalette();\n  }\n  \n  const palette = [];\n  \n  // Try to generate 3 dark colors that match the category\n  let attempts = 0;\n  while (palette.length < 3 && attempts < 100) {\n    const color = generateRandomColor();\n    if (isColorDark(color) && doesColorMatchCategory(color, category)) {\n      palette.push(color);\n    }\n    attempts++;\n  }\n  \n  // Fill remaining dark slots if needed\n  while (palette.length < 3) {\n    let color;\n    do {\n      color = generateRandomColor();\n    } while (!isColorDark(color));\n    palette.push(color);\n  }\n  \n  // Generate neutral color that matches category\n  attempts = 0;\n  let neutralColor;\n  while (!neutralColor && attempts < 100) {\n    const color = generateRandomColor();\n    if (!isColorDark(color) && doesColorMatchCategory(color, category)) {\n      neutralColor = color;\n    }\n    attempts++;\n  }\n  \n  // Fallback to any neutral color if needed\n  if (!neutralColor) {\n    do {\n      neutralColor = generateRandomColor();\n    } while (isColorDark(neutralColor));\n  }\n  \n  // Generate accent color that matches category\n  attempts = 0;\n  let accentColor;\n  while (!accentColor && attempts < 100) {\n    const color = generateRandomColor();\n    const { r, g, b } = hexToRgb(color);\n    const saturation = getSaturation(r, g, b);\n    if (!isColorDark(color) && saturation > 70 && doesColorMatchCategory(color, category)) {\n      accentColor = color;\n    }\n    attempts++;\n  }\n  \n  // Fallback to any accent color if needed\n  if (!accentColor) {\n    do {\n      accentColor = generateRandomColor();\n      const { r, g, b } = hexToRgb(accentColor);\n      const saturation = getSaturation(r, g, b);\n    } while (isColorDark(accentColor) || getSaturation(hexToRgb(accentColor).r, hexToRgb(accentColor).g, hexToRgb(accentColor).b) < 70);\n  }\n  \n  return [...palette, neutralColor, accentColor];\n};","import React, { useState } from 'react';\nimport { getTextColor } from '../utils/colorUtils';\n\nconst ColorPanel = ({ color, colorName }) => {\n  const [copied, setCopied] = useState(false);\n  const textColor = getTextColor(color);\n  \n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(color);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 1500);\n  };\n  \n  return (\n    <div className=\"color-panel\">\n      <button\n        className=\"copy-button\"\n        onClick={copyToClipboard}\n        style={{ color: textColor }}\n      >\n        {copied ? 'Copied!' : 'Copy'}\n      </button>\n      \n      <div className=\"color-info\" style={{ color: textColor }}>\n        <div className=\"color-hex\">{color}</div>\n        <div className=\"color-name\">{colorName}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ColorPanel;","import React, { useState } from 'react';\nimport { generateShades, getTextColor } from '../utils/colorUtils';\n\nconst ColorShades = ({ baseColor }) => {\n  const [copiedIndex, setCopiedIndex] = useState(null);\n  const shades = generateShades(baseColor, 9);\n  \n  const copyToClipboard = (shade, index) => {\n    navigator.clipboard.writeText(shade);\n    setCopiedIndex(index);\n    setTimeout(() => setCopiedIndex(null), 1500);\n  };\n  \n  return (\n    <div className=\"color-shades\">\n      <div className=\"shades-title\">Shades</div>\n      <div className=\"shades-grid\">\n        {shades.map((shade, index) => (\n          <button\n            key={index}\n            className=\"shade-box\"\n            style={{ \n              backgroundColor: shade,\n              color: getTextColor(shade)\n            }}\n            onClick={() => copyToClipboard(shade, index)}\n          >\n            {copiedIndex === index ? (\n              <span className=\"copied-message\">Copied!</span>\n            ) : (\n              <span className=\"shade-value\">{shade}</span>\n            )}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ColorShades;","import React, { useState } from 'react';\nimport ColorLock from './ColorLock';\nimport ColorPanel from './ColorPanel';\nimport ColorShades from './ColorShades';\nimport { getColorName } from '../utils/colorUtils';\n\nconst ColorColumn = ({ color, isLocked, onToggleLock, index }) => {\n  const [showShades, setShowShades] = useState(false);\n  const colorName = getColorName(color);\n  \n  return (\n    <div \n      className=\"color-column\"\n      style={{ backgroundColor: color }}\n      onMouseEnter={() => setShowShades(true)}\n      onMouseLeave={() => setShowShades(false)}\n    >\n      <div className=\"column-top\">\n        <ColorLock \n          color={color} \n          isLocked={isLocked} \n          onToggle={onToggleLock} \n        />\n      </div>\n      \n      <div className=\"column-content\">\n        {showShades && (\n          <ColorShades baseColor={color} />\n        )}\n      </div>\n      \n      <div className=\"column-bottom\">\n        <ColorPanel color={color} colorName={colorName} />\n      </div>\n    </div>\n  );\n};\n\nexport default ColorColumn;","import { useState, useCallback } from 'react';\nimport { generateBalancedPalette, generateCategoryPalette } from '../utils/colorUtils';\n\nexport const useColorGenerator = (initialPalette = null, initialLockedState = null) => {\n  const [palette, setPalette] = useState(initialPalette || generateBalancedPalette());\n  const [lockedColors, setLockedColors] = useState(initialLockedState || Array(5).fill(false));\n  \n  const generateNewPalette = useCallback((category = null) => {\n    setPalette(prevPalette => {\n      const newPalette = category \n        ? generateCategoryPalette(category) \n        : generateBalancedPalette();\n      \n      // Preserve locked colors\n      return prevPalette.map((color, index) => \n        lockedColors[index] ? color : newPalette[index]\n      );\n    });\n  }, [lockedColors]);\n  \n  const toggleLock = useCallback((index) => {\n    setLockedColors(prevState => {\n      const newState = [...prevState];\n      newState[index] = !newState[index];\n      return newState;\n    });\n  }, []);\n  \n  const updateColor = useCallback((index, color) => {\n    setPalette(prevPalette => {\n      const newPalette = [...prevPalette];\n      newPalette[index] = color;\n      return newPalette;\n    });\n  }, []);\n  \n  return {\n    palette,\n    lockedColors,\n    generateNewPalette,\n    toggleLock,\n    updateColor\n  };\n};","export const categories = [\n  {\n    id: 'nature',\n    name: 'Nature',\n    description: 'Colors inspired by the natural world',\n    examples: ['greens', 'browns', 'blues', 'earth tones']\n  },\n  {\n    id: 'technology',\n    name: 'Technology',\n    description: 'Modern, sleek colors for tech interfaces',\n    examples: ['blues', 'silvers', 'blacks', 'whites']\n  },\n  {\n    id: 'food',\n    name: 'Food',\n    description: 'Delicious, appetizing colors',\n    examples: ['reds', 'oranges', 'yellows', 'browns']\n  },\n  {\n    id: 'fashion',\n    name: 'Fashion',\n    description: 'Trendy colors from fashion industry',\n    examples: ['blacks', 'whites', 'reds', 'purples']\n  },\n  {\n    id: 'art',\n    name: 'Art',\n    description: 'Bold, vibrant, creative colors',\n    examples: ['all vibrant colors with high saturation']\n  }\n];\n\nexport default categories;","import React, { useState, useEffect } from 'react';\r\nimport Header from './components/Header';\r\nimport Hero from './components/Hero';\r\nimport ColorColumn from './components/ColorColumn';\r\nimport { useColorGenerator } from './hooks/useColorGenerator';\r\nimport { useKeyPress } from './hooks/useKeyPress';\r\nimport { useLocalStorage } from './hooks/useLocalStorage';\r\nimport { getColorName, doesColorMatchCategory } from './utils/colorUtils';\r\nimport categories from './data/colorCategories';\r\nimport './styles.css';\r\n\r\nconst App = () => {\r\n  // State for search and filtering\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  \r\n  // Get saved palettes from local storage\r\n  const [savedPalettes, setSavedPalettes] = useLocalStorage('savedPalettes', []);\r\n  \r\n  // Initialize color generator hook\r\n  const { \r\n    palette, \r\n    lockedColors, \r\n    generateNewPalette, \r\n    toggleLock \r\n  } = useColorGenerator();\r\n  \r\n  // Listen for spacebar press\r\n  const spacePressed = useKeyPress(' ');\r\n  \r\n  // Generate new palette when spacebar is pressed\r\n  useEffect(() => {\r\n    if (spacePressed) {\r\n      generateNewPalette(selectedCategory);\r\n    }\r\n  }, [spacePressed, generateNewPalette, selectedCategory]);\r\n  \r\n  // Generate new palette when category changes\r\n  useEffect(() => {\r\n    generateNewPalette(selectedCategory);\r\n  }, [selectedCategory, generateNewPalette]);\r\n  \r\n  // Filter palette based on search term\r\n  const filteredPalette = searchTerm\r\n    ? palette.filter(color => {\r\n        const name = getColorName(color).toLowerCase();\r\n        const hex = color.toLowerCase();\r\n        const search = searchTerm.toLowerCase();\r\n        \r\n        return name.includes(search) || hex.includes(search);\r\n      })\r\n    : palette;\r\n  \r\n  // Save current palette\r\n  const savePalette = () => {\r\n    const newSavedPalette = {\r\n      id: Date.now().toString(),\r\n      colors: [...palette],\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    setSavedPalettes([newSavedPalette, ...savedPalettes]);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      \r\n      <Hero\r\n        searchTerm={searchTerm}\r\n        setSearchTerm={setSearchTerm}\r\n        selectedCategory={selectedCategory}\r\n        setSelectedCategory={setSelectedCategory}\r\n        categories={categories}\r\n        onSearch={() => {}}\r\n      />\r\n      \r\n      <div className=\"palette-container\">\r\n        {filteredPalette.map((color, index) => (\r\n          <ColorColumn\r\n            key={index}\r\n            index={index}\r\n            color={color}\r\n            isLocked={lockedColors[index]}\r\n            onToggleLock={() => toggleLock(index)}\r\n          />\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"controls\">\r\n        <div className=\"key-instructions\">\r\n          Press <kbd>spacebar</kbd> to generate a new palette\r\n        </div>\r\n        \r\n        <button className=\"save-button\" onClick={savePalette}>\r\n          Save Palette\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  \n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  \n  // Listen for changes to this key in localStorage\n  useEffect(() => {\n    const handleStorageChange = (e) => {\n      if (e.key === key) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    \n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [key]);\n  \n  return [storedValue, setValue];\n};","import { useEffect, useState } from 'react';\n\nexport const useKeyPress = (targetKey) => {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  \n  // If pressed key is our target key then set to true\n  const downHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  };\n  \n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n  \n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    \n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n  \n  return keyPressed;\n};","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}